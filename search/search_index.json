{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python Guide \u00b6 Python Guide is a repository of tool and tips to help learning Python and Software Development with Python. This guide will never include all functionnality of Python but help to start with nice and \"easy to learn\" tools.","title":"Overview"},{"location":"#welcome-to-python-guide","text":"Python Guide is a repository of tool and tips to help learning Python and Software Development with Python. This guide will never include all functionnality of Python but help to start with nice and \"easy to learn\" tools.","title":"Welcome to Python Guide"},{"location":"about/","text":"Blabla","title":"About"},{"location":"developement/","text":"Developement Process \u00b6 Clean your environement \u00b6 Uninstall all package pip freeze > requirements.txt pip uninstall -r requirements.txt -y Or if you don't wan't to overide your requirements.txt pip uninstall -y -r <(pip freeze) Clone Directory \u00b6 Change directory where you want to clone the repository PS C:\\Users\\*USERNAME*\\PythonWorkspace> cd Project PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project> Git clone the repository under _MeasureLib PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project> git clone https://github.com/yoannmos/MeasureLib.git _MeasureLib Change directory to _MeasureLib PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project> cd _MeasureLib PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> Create virtual environment \u00b6 Create a virtual environment PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> python -m venv .venv Activate the environment PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> .venv\\Scripts\\activate (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> Install requirements (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> pip install -r requirements.txt Setup your vs code settings { \"python.pythonPath\" : \".venv\\\\Scripts\\\\python.exe\" , \"python.formatting.provider\" : \"black\" , \"python.linting.pylintEnabled\" : true , \"python.linting.enabled\" : true , \"python.testing.pytestArgs\" : [ \"AlimEa\\\\tests\" , \"Hbm\\\\tests\" ], \"python.testing.unittestEnabled\" : false , \"python.testing.nosetestsEnabled\" : false , \"python.testing.pytestEnabled\" : true } Create a branch (Try to use a feature name for YOUR_BRANCH) (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> git checkout -b *YOUR_BRANCH* Start developping on your branch and commit your changes. Test your branch by intalling with pip in a seperate env. (test) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> pip install -e . When you are ready to Pull Request your feature, Push the branch on github (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> git push origin *YOUR_BRANCH* And create a Pull Request on master in GitHub","title":"Developement Process"},{"location":"developement/#developement-process","text":"","title":"Developement Process"},{"location":"developement/#clean-your-environement","text":"Uninstall all package pip freeze > requirements.txt pip uninstall -r requirements.txt -y Or if you don't wan't to overide your requirements.txt pip uninstall -y -r <(pip freeze)","title":"Clean your environement"},{"location":"developement/#clone-directory","text":"Change directory where you want to clone the repository PS C:\\Users\\*USERNAME*\\PythonWorkspace> cd Project PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project> Git clone the repository under _MeasureLib PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project> git clone https://github.com/yoannmos/MeasureLib.git _MeasureLib Change directory to _MeasureLib PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project> cd _MeasureLib PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib>","title":"Clone Directory"},{"location":"developement/#create-virtual-environment","text":"Create a virtual environment PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> python -m venv .venv Activate the environment PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> .venv\\Scripts\\activate (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> Install requirements (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> pip install -r requirements.txt Setup your vs code settings { \"python.pythonPath\" : \".venv\\\\Scripts\\\\python.exe\" , \"python.formatting.provider\" : \"black\" , \"python.linting.pylintEnabled\" : true , \"python.linting.enabled\" : true , \"python.testing.pytestArgs\" : [ \"AlimEa\\\\tests\" , \"Hbm\\\\tests\" ], \"python.testing.unittestEnabled\" : false , \"python.testing.nosetestsEnabled\" : false , \"python.testing.pytestEnabled\" : true } Create a branch (Try to use a feature name for YOUR_BRANCH) (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> git checkout -b *YOUR_BRANCH* Start developping on your branch and commit your changes. Test your branch by intalling with pip in a seperate env. (test) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> pip install -e . When you are ready to Pull Request your feature, Push the branch on github (.venv) PS C:\\Users\\*USERNAME*\\PythonWorkspace\\Project\\_MeasureLib> git push origin *YOUR_BRANCH* And create a Pull Request on master in GitHub","title":"Create virtual environment"},{"location":"installation/","text":"Installation \u00b6 A walkthrough installation and setup of Python 3.X.X environment on Windows 10. Those step use Windows PowerShell, This will help familiarize you with the command prompt. First of all, open a PowerShell instance. It will be assume your configuration follow this tutorial. Workspace \u00b6 1. Start PowerShell \u00b6 Click Windows search button and type Windows PowerShell and click on Windows PowerShell [x86] You should have a command prompt open now. 2. Change directory \u00b6 First of all, move to your user directory with cd command. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. C:\\> cd C:\\Users\\*Username* C:\\Users\\*Username*> Tip Type few letter and press <TAB> to auto-complete. For exemple, if you type cd C:\\Use<TAB> , and it will auto-complete cd C:\\Users\\ automaticaly. If you want to list files in a directory you can use ls 3. Create a directory \u00b6 Create a PythonWorkspace folder with mkdir command. and add inside few folders : - Download - Environment - Project - Settings Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. C:\\Users\\*Username*>mkdir PythonWorkspace C:\\Users\\*Username*> cd PythonWorkspace C:\\Users\\*Username*\\PythonWorkspace> mkdir Download ... C:\\Users\\*Username*\\PythonWorkspace> mkdir Environment ... C:\\Users\\*Username*\\PythonWorkspace> mkdir Project ... C:\\Users\\*Username*\\PythonWorkspace> mkdir Settings ... Tip cd .. : to go up one directory cd ..\\.. : to go up two directory You can verify you have all folders with ls when you are in your PythonWorkspace. C:\\Users\\*Username*\\PythonWorkspace> ls Directory: C:\\Users\\*Username*\\PythonWorkspace Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 01.01.2020 08:00 Download d----- 01.01.2020 08:00 Environment d----- 01.01.2020 08:00 Project d----- 01.01.2020 08:00 Settings Tip cls : To clear the screen and keep only the last line on screen If you need to delete a file or a folder you can use del *FileName_or_FolderName Warning del don't put your file or folder in Recycle Bin and you don't have an alert message. Use it with caution. Python \u00b6 1. Install Python \u00b6 Go to https://www.python.org/downloads/ Download Python ( Prefer 32x version over 64x for general use ) Run the installer Click : Add Python 3.X to PATH Install 2. Test your install \u00b6 Open cmd and tap python Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. C:\\Users\\*Username*>python Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 14 2019, 23:09:19) [MSC v.1916 32 bit (Intel)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> 3. Setup your virtual environement \u00b6 Move to your Environment folder with cd command C:\\Users\\*Username*>cd PythonWorkspace\\Environment C:\\Users\\*Username*\\PythonWorkspace\\Environment Virtual environement permit to install package seperatly and never polute your Python install Then create a Base environement C:\\Users\\*Username*\\PythonWorkspace\\Environment>python -m venv Base Activate it C:\\Users\\*Username*\\PythonWorkspace\\Environment>Base\\Scripts\\activate You should see (Base) C:\\Users\\*Username*\\PythonWorkspace\\Environment> To deactivate your environemnet simply type \"deactivate\" (Base) C:\\Users\\*Username*\\PythonWorkspace\\Environment>deactivate C:\\Users\\*Username*\\PythonWorkspace\\Environment> Create a lab env following the same logic and activate it before next step 4. Install packages \u00b6 Danger Nerver install package on your base python Install : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip install #PACKAGENAME# Uninstall : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip uninstall #PACKAGENAME# Downgrade : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip install #PACKAGENAME#==2.1 --upgrade List of installed lib : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip freeze File of installed lib : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip freeze > python_lib_list.txt Package Commonly used \u00b6 This list is just a basic list, you will find much more information Library. Science Base : scipy, numpy, matplotlib Calcul symbolique : sympy Traducteur : Babel COM Win32 : pywin32 Additional GUI App : PyQt5 ou Pyside2 AutoGUI : pyautogui Image : pillow Xlsx : openpyxl (xlrd deprecated) Docx : python-docx (Warning: import docx) Pdf : PyPDF2 Web : requests, bs4, selenium Mail : ezgmail Linter : Pylint Formatter : black Notebook IDE : ipython jupyter jupyterlab Standard IDE : VSC VSCode \u00b6 1. Install VSCode \u00b6 Go to https://code.visualstudio.com/download Download Vscode Run the installer ADD INFO HERE In Extension, install Python Extension. 2. Setup your Environement \u00b6 Change to JSON settings \u00b6 Click on bottom gear icon button and click settings. On the top right corner click on the button to \"Open Settings (JSON)\" Copy the following line in your settings.json { // Workbench \"workbench.settings.editor\" : \"json\" , \"workbench.settings.openDefaultSettings\" : true } { // Workbench \"workbench.colorTheme\" : \"One Dark Pro\" , \"workbench.iconTheme\" : \"vscode-icons\" , \"workbench.settings.editor\" : \"json\" , \"workbench.settings.openDefaultSettings\" : true , //Terminal \"terminal.integrated.shell.windows\" : \"C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\" , // Editor \"editor.formatOnSave\" : true , // Python \"python.pythonPath\" : \"C:\\\\Users\\\\*Username*\\\\PythonWorkspace\\\\Environment\\\\Base\\\\Scripts\\\\python.exe\" , \"python.venvPath\" : \"C:\\\\Users\\\\*Username*\\\\PythonWorkspace\\\\Environment\" , \"python.formatting.provider\" : \"black\" , } Info Corey Shaffer as made a really good tutorial on youtube. Watch it if you need more info. Git \u00b6 1. Install Git \u00b6 Go to https://git-scm.com/downloads Download Git Run the installer Select Components window Leave all default options checked and check any other additional components you want installed. Choosing the default editor Choose VSCode (if installed) or Notepad++ Adjusting your PATH environment Keep the default Use Git from the command line and also from 3rd-party software. Leave the default selected as Use OpenSSH Leave the default Use the OpenSSL library selected Configuring the line ending conversions Select Checkout Windows-style, commit Unix-style line endings unless you need other line endings for your work. Configuring the terminal emulator : Use with Git Bash window Select Use Windows' default console window (or MinTTY, the default terminal of MSYS2) Configuring extra options window Leave the default options checked unless you need symbolic links. Click the Install button 2. Configure Git \u00b6 Enter your name and user name \u00b6 In a PowerShell enter your global name and global email. PS C:\\> git config --global user.name \"John Doe\" PS C:\\> git config --global user.email johndoe@example.com Verify with PS C:\\> git config --list user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ...","title":"Installation"},{"location":"installation/#installation","text":"A walkthrough installation and setup of Python 3.X.X environment on Windows 10. Those step use Windows PowerShell, This will help familiarize you with the command prompt. First of all, open a PowerShell instance. It will be assume your configuration follow this tutorial.","title":"Installation"},{"location":"installation/#workspace","text":"","title":"Workspace"},{"location":"installation/#1-start-powershell","text":"Click Windows search button and type Windows PowerShell and click on Windows PowerShell [x86] You should have a command prompt open now.","title":"1. Start PowerShell"},{"location":"installation/#2-change-directory","text":"First of all, move to your user directory with cd command. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. C:\\> cd C:\\Users\\*Username* C:\\Users\\*Username*> Tip Type few letter and press <TAB> to auto-complete. For exemple, if you type cd C:\\Use<TAB> , and it will auto-complete cd C:\\Users\\ automaticaly. If you want to list files in a directory you can use ls","title":"2. Change directory"},{"location":"installation/#3-create-a-directory","text":"Create a PythonWorkspace folder with mkdir command. and add inside few folders : - Download - Environment - Project - Settings Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. C:\\Users\\*Username*>mkdir PythonWorkspace C:\\Users\\*Username*> cd PythonWorkspace C:\\Users\\*Username*\\PythonWorkspace> mkdir Download ... C:\\Users\\*Username*\\PythonWorkspace> mkdir Environment ... C:\\Users\\*Username*\\PythonWorkspace> mkdir Project ... C:\\Users\\*Username*\\PythonWorkspace> mkdir Settings ... Tip cd .. : to go up one directory cd ..\\.. : to go up two directory You can verify you have all folders with ls when you are in your PythonWorkspace. C:\\Users\\*Username*\\PythonWorkspace> ls Directory: C:\\Users\\*Username*\\PythonWorkspace Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 01.01.2020 08:00 Download d----- 01.01.2020 08:00 Environment d----- 01.01.2020 08:00 Project d----- 01.01.2020 08:00 Settings Tip cls : To clear the screen and keep only the last line on screen If you need to delete a file or a folder you can use del *FileName_or_FolderName Warning del don't put your file or folder in Recycle Bin and you don't have an alert message. Use it with caution.","title":"3. Create a directory"},{"location":"installation/#python","text":"","title":"Python"},{"location":"installation/#1-install-python","text":"Go to https://www.python.org/downloads/ Download Python ( Prefer 32x version over 64x for general use ) Run the installer Click : Add Python 3.X to PATH Install","title":"1. Install Python"},{"location":"installation/#2-test-your-install","text":"Open cmd and tap python Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. C:\\Users\\*Username*>python Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 14 2019, 23:09:19) [MSC v.1916 32 bit (Intel)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>","title":"2. Test your install"},{"location":"installation/#3-setup-your-virtual-environement","text":"Move to your Environment folder with cd command C:\\Users\\*Username*>cd PythonWorkspace\\Environment C:\\Users\\*Username*\\PythonWorkspace\\Environment Virtual environement permit to install package seperatly and never polute your Python install Then create a Base environement C:\\Users\\*Username*\\PythonWorkspace\\Environment>python -m venv Base Activate it C:\\Users\\*Username*\\PythonWorkspace\\Environment>Base\\Scripts\\activate You should see (Base) C:\\Users\\*Username*\\PythonWorkspace\\Environment> To deactivate your environemnet simply type \"deactivate\" (Base) C:\\Users\\*Username*\\PythonWorkspace\\Environment>deactivate C:\\Users\\*Username*\\PythonWorkspace\\Environment> Create a lab env following the same logic and activate it before next step","title":"3. Setup your virtual environement"},{"location":"installation/#4-install-packages","text":"Danger Nerver install package on your base python Install : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip install #PACKAGENAME# Uninstall : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip uninstall #PACKAGENAME# Downgrade : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip install #PACKAGENAME#==2.1 --upgrade List of installed lib : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip freeze File of installed lib : (lab) PS C:\\Users\\*Username*\\PythonWorkspace> pip freeze > python_lib_list.txt","title":"4. Install packages"},{"location":"installation/#package-commonly-used","text":"This list is just a basic list, you will find much more information Library. Science Base : scipy, numpy, matplotlib Calcul symbolique : sympy Traducteur : Babel COM Win32 : pywin32 Additional GUI App : PyQt5 ou Pyside2 AutoGUI : pyautogui Image : pillow Xlsx : openpyxl (xlrd deprecated) Docx : python-docx (Warning: import docx) Pdf : PyPDF2 Web : requests, bs4, selenium Mail : ezgmail Linter : Pylint Formatter : black Notebook IDE : ipython jupyter jupyterlab Standard IDE : VSC","title":"Package Commonly used"},{"location":"installation/#vscode","text":"","title":"VSCode"},{"location":"installation/#1-install-vscode","text":"Go to https://code.visualstudio.com/download Download Vscode Run the installer ADD INFO HERE In Extension, install Python Extension.","title":"1. Install VSCode"},{"location":"installation/#2-setup-your-environement","text":"","title":"2. Setup your Environement"},{"location":"installation/#change-to-json-settings","text":"Click on bottom gear icon button and click settings. On the top right corner click on the button to \"Open Settings (JSON)\" Copy the following line in your settings.json { // Workbench \"workbench.settings.editor\" : \"json\" , \"workbench.settings.openDefaultSettings\" : true } { // Workbench \"workbench.colorTheme\" : \"One Dark Pro\" , \"workbench.iconTheme\" : \"vscode-icons\" , \"workbench.settings.editor\" : \"json\" , \"workbench.settings.openDefaultSettings\" : true , //Terminal \"terminal.integrated.shell.windows\" : \"C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\" , // Editor \"editor.formatOnSave\" : true , // Python \"python.pythonPath\" : \"C:\\\\Users\\\\*Username*\\\\PythonWorkspace\\\\Environment\\\\Base\\\\Scripts\\\\python.exe\" , \"python.venvPath\" : \"C:\\\\Users\\\\*Username*\\\\PythonWorkspace\\\\Environment\" , \"python.formatting.provider\" : \"black\" , } Info Corey Shaffer as made a really good tutorial on youtube. Watch it if you need more info.","title":"Change to JSON settings"},{"location":"installation/#git","text":"","title":"Git"},{"location":"installation/#1-install-git","text":"Go to https://git-scm.com/downloads Download Git Run the installer Select Components window Leave all default options checked and check any other additional components you want installed. Choosing the default editor Choose VSCode (if installed) or Notepad++ Adjusting your PATH environment Keep the default Use Git from the command line and also from 3rd-party software. Leave the default selected as Use OpenSSH Leave the default Use the OpenSSL library selected Configuring the line ending conversions Select Checkout Windows-style, commit Unix-style line endings unless you need other line endings for your work. Configuring the terminal emulator : Use with Git Bash window Select Use Windows' default console window (or MinTTY, the default terminal of MSYS2) Configuring extra options window Leave the default options checked unless you need symbolic links. Click the Install button","title":"1. Install Git"},{"location":"installation/#2-configure-git","text":"","title":"2. Configure Git"},{"location":"installation/#enter-your-name-and-user-name","text":"In a PowerShell enter your global name and global email. PS C:\\> git config --global user.name \"John Doe\" PS C:\\> git config --global user.email johndoe@example.com Verify with PS C:\\> git config --list user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ...","title":"Enter your name and user name"},{"location":"not_imp/","text":"Sorry not implemented \u00b6","title":"Tips"},{"location":"not_imp/#sorry-not-implemented","text":"","title":"Sorry not implemented"},{"location":"test/","text":"Module sample \u00b6 This is a sample module. Variables \u00b6 variable {: #variable } ( int ): Docstrings for module-level variables. Classes \u00b6 SampleClass {: #SampleClass } \u00b6 class SampleClass ( self , b : str ) Class docstrings. Attributes baz ( str ): Docstrings for attributes. Args b ( str ): Arguments for initializing. Methods {: #SampleClass-methods } \u00b6 method {: #SampleClass.method } def method ( self , bar : int ) -> str Method docstrings. Cross reference available. func Args bar ( int ) Returns str Functions \u00b6 func {: #func } \u00b6 def func ( foo : str , bar : int ) -> str Docstrings for functions. Args foo ( str ): First argument. bar ( int ): Second argument. Returns str : Type of return value.","title":"Test"},{"location":"test/#module-sample","text":"This is a sample module.","title":"Module sample"},{"location":"test/#variables","text":"variable {: #variable } ( int ): Docstrings for module-level variables.","title":"Variables"},{"location":"test/#classes","text":"","title":"Classes"},{"location":"test/#sampleclass-sampleclass","text":"class SampleClass ( self , b : str ) Class docstrings. Attributes baz ( str ): Docstrings for attributes. Args b ( str ): Arguments for initializing.","title":"SampleClass {: #SampleClass }"},{"location":"test/#methods-sampleclass-methods","text":"method {: #SampleClass.method } def method ( self , bar : int ) -> str Method docstrings. Cross reference available. func Args bar ( int ) Returns str","title":"Methods {: #SampleClass-methods }"},{"location":"test/#functions","text":"","title":"Functions"},{"location":"test/#func-func","text":"def func ( foo : str , bar : int ) -> str Docstrings for functions. Args foo ( str ): First argument. bar ( int ): Second argument. Returns str : Type of return value.","title":"func {: #func }"},{"location":"Library/path/","text":"Dealing with Path, Directory and Files \u00b6 Majors tools, \"Python included\" , to deal with path are pathlib and os module. Module Documentation pathlib pathlib documentation - PEP 428 os os.path documentation pathlib.Path >>> from pathlib import Path # Relative Path >>> Path ( 'my/relative/path' ) WindowsPath ( 'my/relative/path' ) # Absolute Path >>> Path . cwd () / Path ( 'my/absolute/path' ) WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project/_PythonGuide/my/absolute/path' ) # Use of Path >>> p = Path ( 'C:/Users/*Username*/_PythonGuide/LICENCE.txt' ) >>> p . parts ( 'C: \\\\ ' , 'Users' , '*Username*' , '_PythonGuide' , 'LICENCE.txt' ) >>> p . anchor 'C: \\\\ ' >>> p . parent WindowsPath ( 'C:/Users/*Username*/_PythonGuide' ) >>> p . name 'LICENCE.txt' >>> p . stem 'LICENCE' >>> p . suffix '.txt' >>> p . drive 'C:' os >>> import os # Relative Path >>> os . path . relpath ( 'my/relative/path' ) 'my \\\\ relative \\\\ path' # Absolute Path >>> os . path . abspath ( 'my/absolute/path' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project \\\\ _PythonGuide \\\\ my \\\\ absolute \\\\ path' # Use of os.path >>> p = 'C: \\\\ Users \\\\ *Username* \\\\ _PythonGuide \\\\ LICENCE.txt' >>> os . path . dirname ( p ) 'C: \\\\ Users \\\\ *Username* \\\\ _PythonGuide' >>> os . path . basename ( p ) 'LICENCE.txt' >>> os . path . split ( p ) ( 'C: \\\\ Users \\\\ *Username* \\\\ _PythonGuide' , 'LICENCE.txt' ) To get the current working directory pathlib.Path >>> Path . cwd () WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project/_PythonGuide' ) os >>> os . getcwd () 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project \\\\ _PythonGuide' Or get the parent directory pathlib.Path >>> p = Path . cwd () >>> p WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project/_PythonGuide' ) >>> list ( p . parents ) [ WindowsPath ( 'C:/Users/*Username*/_PythonGuide' ), WindowsPath ( 'C:/Users/*Username*' ), WindowsPath ( 'C:/Users' ), WindowsPath ( 'C:/' )] >>> Path . cwd () . parents [ 0 ] WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project' ) >>> Path . cwd () . parents [ 1 ] WindowsPath ( 'C:/Users/*Username*/PythonWorkspace' ) >>> Path . cwd () . parents [ 2 ] WindowsPath ( 'C:/Users/*Username*' ) >>> Path . cwd () . parents [ 3 ] WindowsPath ( 'C:/Users' ) >>> Path . cwd () . parents [ 4 ] WindowsPath ( 'C:/' ) os >>> os . path . abspath ( '.' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project \\\\ _PythonGuide' >>> os . path . abspath ( '..' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project' >>> os . path . abspath ( '..\\..' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace' >>> os . path . abspath ( '..\\..\\..' ) 'C: \\\\ Users \\\\ *Username*' >>> os . path . abspath ( '..\\..\\..\\..' ) 'C: \\\\ Users' >>> os . path . abspath ( '..\\..\\..\\..\\..' ) 'C: \\\\ ' To change your working directory os . chdir ( 'A:/New/Path' ) To get the full path to the directory where your Python file is contained in: # __file__ is a constant, representing the .py file executed file_path = os . path . realpath ( __file__ ) dir_path = os . path . dirname ( os . path . realpath ( __file__ )) To concatenate path >>> Path . cwd () / Path ( 'my/absolute/path' ) WindowsPath ( 'C:/Users/*Username*/AppData/Local/Programs/Python/Python37/my/absolute/path' ) # or os . join ( os . getcwd (), 'my/relative/path' ) (Note that the incantation above won't work if you've already used os.chdir() to change your current working directory, since the value of the file constant is relative to the current working directory and is not changed by an os.chdir() call.) >>> Path . home () WindowsPath ( 'C:/Users/*Username*' ) Path ( r 'C:\\Users\\*Username*\\spam' ) . mkdir () # Create the spam folder os . makedirs () .","title":"Path"},{"location":"Library/path/#dealing-with-path-directory-and-files","text":"Majors tools, \"Python included\" , to deal with path are pathlib and os module. Module Documentation pathlib pathlib documentation - PEP 428 os os.path documentation pathlib.Path >>> from pathlib import Path # Relative Path >>> Path ( 'my/relative/path' ) WindowsPath ( 'my/relative/path' ) # Absolute Path >>> Path . cwd () / Path ( 'my/absolute/path' ) WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project/_PythonGuide/my/absolute/path' ) # Use of Path >>> p = Path ( 'C:/Users/*Username*/_PythonGuide/LICENCE.txt' ) >>> p . parts ( 'C: \\\\ ' , 'Users' , '*Username*' , '_PythonGuide' , 'LICENCE.txt' ) >>> p . anchor 'C: \\\\ ' >>> p . parent WindowsPath ( 'C:/Users/*Username*/_PythonGuide' ) >>> p . name 'LICENCE.txt' >>> p . stem 'LICENCE' >>> p . suffix '.txt' >>> p . drive 'C:' os >>> import os # Relative Path >>> os . path . relpath ( 'my/relative/path' ) 'my \\\\ relative \\\\ path' # Absolute Path >>> os . path . abspath ( 'my/absolute/path' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project \\\\ _PythonGuide \\\\ my \\\\ absolute \\\\ path' # Use of os.path >>> p = 'C: \\\\ Users \\\\ *Username* \\\\ _PythonGuide \\\\ LICENCE.txt' >>> os . path . dirname ( p ) 'C: \\\\ Users \\\\ *Username* \\\\ _PythonGuide' >>> os . path . basename ( p ) 'LICENCE.txt' >>> os . path . split ( p ) ( 'C: \\\\ Users \\\\ *Username* \\\\ _PythonGuide' , 'LICENCE.txt' ) To get the current working directory pathlib.Path >>> Path . cwd () WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project/_PythonGuide' ) os >>> os . getcwd () 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project \\\\ _PythonGuide' Or get the parent directory pathlib.Path >>> p = Path . cwd () >>> p WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project/_PythonGuide' ) >>> list ( p . parents ) [ WindowsPath ( 'C:/Users/*Username*/_PythonGuide' ), WindowsPath ( 'C:/Users/*Username*' ), WindowsPath ( 'C:/Users' ), WindowsPath ( 'C:/' )] >>> Path . cwd () . parents [ 0 ] WindowsPath ( 'C:/Users/*Username*/PythonWorkspace/Project' ) >>> Path . cwd () . parents [ 1 ] WindowsPath ( 'C:/Users/*Username*/PythonWorkspace' ) >>> Path . cwd () . parents [ 2 ] WindowsPath ( 'C:/Users/*Username*' ) >>> Path . cwd () . parents [ 3 ] WindowsPath ( 'C:/Users' ) >>> Path . cwd () . parents [ 4 ] WindowsPath ( 'C:/' ) os >>> os . path . abspath ( '.' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project \\\\ _PythonGuide' >>> os . path . abspath ( '..' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace \\\\ Project' >>> os . path . abspath ( '..\\..' ) 'C: \\\\ Users \\\\ *Username* \\\\ PythonWorkspace' >>> os . path . abspath ( '..\\..\\..' ) 'C: \\\\ Users \\\\ *Username*' >>> os . path . abspath ( '..\\..\\..\\..' ) 'C: \\\\ Users' >>> os . path . abspath ( '..\\..\\..\\..\\..' ) 'C: \\\\ ' To change your working directory os . chdir ( 'A:/New/Path' ) To get the full path to the directory where your Python file is contained in: # __file__ is a constant, representing the .py file executed file_path = os . path . realpath ( __file__ ) dir_path = os . path . dirname ( os . path . realpath ( __file__ )) To concatenate path >>> Path . cwd () / Path ( 'my/absolute/path' ) WindowsPath ( 'C:/Users/*Username*/AppData/Local/Programs/Python/Python37/my/absolute/path' ) # or os . join ( os . getcwd (), 'my/relative/path' ) (Note that the incantation above won't work if you've already used os.chdir() to change your current working directory, since the value of the file constant is relative to the current working directory and is not changed by an os.chdir() call.) >>> Path . home () WindowsPath ( 'C:/Users/*Username*' ) Path ( r 'C:\\Users\\*Username*\\spam' ) . mkdir () # Create the spam folder os . makedirs () .","title":"Dealing with Path, Directory and Files"}]}